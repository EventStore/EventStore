name: Build

on:
  pull_request:
  push:
    branches:
    - master
    tags:
    - oss-v*
env:
  DOTNET_SDK_VERSION: 3.1.201
jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    name: ci/github/scan-vulnerabilities
    container: mcr.microsoft.com/dotnet/core/sdk:3.1-bionic
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Scan for Vulnerabilities
      run: |
        dotnet tool restore
        cd src
        dotnet restore
        dotnet tool run dotnet-retire
  build-container:
    strategy:
      fail-fast: false
      matrix:
        container-runtime: [bionic, buster-slim]
        runtime: [linux-x64]
    runs-on: ubuntu-latest
    name: ci/github/build-${{ matrix.container-runtime }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Dotnet
      uses: actions/setup-dotnet@v1.4.0
      with:
        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
    - name: Calculate Version
      run: |
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        dotnet tool restore
        version=$(dotnet tool run minver -- --tag-prefix=oss-v)-${{ matrix.container-runtime }}
        echo "::set-env name=VERSION::${version}"
    - name: Build
      run: |
        docker build \
          --tag eventstore \
          --build-arg RUNTIME=${{ matrix.runtime }} \
          --build-arg CONTAINER_RUNTIME=${{ matrix.container-runtime }} \
          .
    - name: Run Tests
      run: |
        docker build \
          --target test \
          --tag eventstore-test \
          --build-arg RUNTIME=${{ matrix.runtime }} \
          --build-arg CONTAINER_RUNTIME=${{ matrix.container-runtime }} \
          . && \
          docker run \
          --volume $(pwd)/test-results:/build/test-results \
          --rm \
          eventstore-test
    - name: Publish Test Results (HTML)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        path: test-results/test-results.html
        name: test-results-${{ matrix.container-runtime }}.html
    - name: Publish Test Results (All)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: test-results-${{ matrix.container-runtime }}
        path: test-results
    - name: Docker Push
      uses: jen20/action-docker-build@v1
      if: github.event_name == 'push'
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        repository: docker.pkg.github.com/eventstore/eventstore/eventstore
        tag-latest: false
        additional-tags: ${{ env.VERSION }}
        registry: https://docker.pkg.github.com
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019]
        configuration: [release]
    runs-on: ${{ matrix.os }}
    name: ci/github/build-${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Dotnet
      uses: actions/setup-dotnet@v1.4.0
      with:
        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
    - name: Calculate Version
      shell: bash
      run: |
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        dotnet tool restore
        version=$(dotnet tool run minver -- --tag-prefix=oss-v)
        echo "::set-env name=VERSION::${version}"
    - name: Install Test CA Root Certificate (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        certutil -addstore root src\EventStore.Core.Tests\Services\Transport\Tcp\test_certificates\ca\ca.crt
    - name: Install Test CA Root Certificate (Linux)
      if: startsWith(matrix.os, 'windows') != true
      run: |
        sudo cp src/EventStore.Core.Tests/Services/Transport/Tcp/test_certificates/ca/ca.crt /usr/local/share/ca-certificates/ca_eventstore_test.crt
        sudo update-ca-certificates
    - name: Compile
      shell: bash
      run: |
        dotnet build --configuration ${{ matrix.configuration }} src/EventStore.sln
    - name: Run Tests
      shell: bash
      run: |
        find ./src -maxdepth 1 -type d -name "*.Tests"  -print0 | xargs -I{} -0 -n1 bash -c 'dotnet test --configuration ${{ matrix.configuration }} --blame --settings ./ci/ci.runsettings --logger:html --logger:trx --logger:"console;verbosity=normal" --results-directory=$(pwd)/test-results/$1 $1' - '{}'
    - name: Collect Test Results
      shell: bash
      if: always()
      run: |
        echo $(find ./test-results -name "*.html" | xargs cat) > test-results.html
    - name: Publish Test Results (HTML)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        path: test-results.html
        name: test-results-${{ matrix.configuration }}-${{ matrix.os }}.html
    - name: Publish Test Results (All)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}-${{ matrix.os }}
        path: test-results
  publish:
    needs: [vulnerability-scan]
    strategy:
      fail-fast: false
      matrix:
        configuration: [release]
        runtime: [ubuntu.16.04-x64, ubuntu.18.04-x64, win-x64, rhel-x64, centos.7-x64]
    runs-on: ubuntu-latest
    name: ci/github/publish-${{ matrix.runtime }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Dotnet
      uses: actions/setup-dotnet@v1.4.0
      with:
        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
    - name: Calculate Version
      run: |
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        dotnet tool restore
        version=$(dotnet tool run minver -- --tag-prefix=oss-v)
        echo "::set-env name=VERSION::${version}"
    - name: Dotnet Publish
      run: |
        dotnet publish --configuration=${{ matrix.configuration }} --runtime=${{ matrix.runtime }} --self-contained \
          --framework=netcoreapp3.1 --output ./packaging/eventstore /p:PublishTrimmed=true /p:Version=${{ env.VERSION }} \
          src/EventStore.ClusterNode
    - name: Create Package (Debian)
      if: contains(matrix.runtime, 'ubuntu')
      run: |
        docker run --workdir=/tmp/pkg -e VERSION=${{ env.VERSION }} --rm --volume $PWD/packaging:/tmp/pkg \
          goreleaser/nfpm:v1.2.0 pkg --config /tmp/pkg/nfpm.yml --target /tmp/pkg/output/eventstore-${{ env.VERSION }}.deb
    - name: Create Package (Redhat)
      if: contains(matrix.runtime, 'rhel') || contains(matrix.runtime, 'centos')
      run: |
        docker run --workdir=/tmp/pkg -e VERSION=${{ env.VERSION }} --rm --volume $PWD/packaging:/tmp/pkg \
          goreleaser/nfpm:v1.2.0 pkg --config /tmp/pkg/nfpm.yml --target /tmp/pkg/output/eventstore-${{ env.VERSION }}.rpm
    - name: Create Package (Windows)
      if: contains(matrix.runtime, 'win')
      run: |
        docker run --workdir=/tmp/pkg  -e ChocolateyInstall=/opt/chocolatey --rm --volume $PWD/packaging:/tmp/pkg \
          --entrypoint mono thinkco/chocolatey:0.10.15 /opt/chocolatey/choco.exe pack win/eventstore-oss.nuspec \
          --version=${{ env.VERSION }} --allow-unofficial --output-directory=/tmp/pkg/output --yes --force
    - name: Publish Package
      uses: actions/upload-artifact@v1
      with:
        path: packaging/output
        name: package-${{ matrix.runtime }}
