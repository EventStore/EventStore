name: Build

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - oss-v*
    paths-ignore:
      - "/docs/**"
      - "/samples/**"
      - "**.md"

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    name: ci/github/scan-vulnerabilities
    container: mcr.microsoft.com/dotnet/core/sdk:3.1-bionic
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Scan for Vulnerabilities
      run: |
        dotnet tool restore
        cd src
        dotnet restore
        dotnet tool run dotnet-retire
  protolock:
    runs-on: ubuntu-latest
    name: ci/github/protolock
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Protolock Status
      shell: bash
      run: |
        ./protolock.sh status --uptodate
  docker-compose:
    runs-on: ubuntu-latest
    name: ci/github/docker-compose
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Github Registry Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com/eventstore
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker Compose Smoke Test
      run: |
        docker-compose build
        docker-compose up --detach
        printf 'Waiting for cluster'
        timeout 60 bash -c -- 'until $(curl --output /dev/null --silent --insecure --fail https://localhost:2113/health/live); do printf '.'; sleep 2; done'
        docker-compose down
  build-container:
    strategy:
      fail-fast: false
      matrix:
        container-runtime: [focal, buster-slim]
        runtime: [linux-x64]
    runs-on: ubuntu-latest
    name: ci/github/build-${{ matrix.container-runtime }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - shell: bash
      run: |
        git fetch --prune --unshallow
    - name: Install net5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Calculate Version
      run: |
        dotnet tool restore
        version=$(dotnet tool run minver -- --tag-prefix=oss-v)-${{ matrix.container-runtime }}
        echo "VERSION=${version}" >> $GITHUB_ENV
    - name: Build
      run: |
        docker build \
          --tag eventstore \
          --build-arg RUNTIME=${{ matrix.runtime }} \
          --build-arg CONTAINER_RUNTIME=${{ matrix.container-runtime }} \
          .
    - name: Verify Build
      run: |
        docker run -e EVENTSTORE_DEV=true -e EVENTSTORE_WHAT_IF=true --rm eventstore
    - name: Run Tests
      run: |
        docker build \
          --target test \
          --tag eventstore-test \
          --build-arg RUNTIME=${{ matrix.runtime }} \
          --build-arg CONTAINER_RUNTIME=${{ matrix.container-runtime }} \
          . && \
          docker run \
          --volume $(pwd)/test-results:/build/test-results \
          --rm \
          eventstore-test
    - name: Publish Test Results (HTML)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        path: test-results/test-results.html
        name: test-results-${{ matrix.container-runtime }}.html
    - name: Publish Test Results (All)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: test-results-${{ matrix.container-runtime }}
        path: test-results
    - name: Docker Push
      uses: jen20/action-docker-build@v1
      if: github.event_name == 'push'
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        repository: docker.pkg.github.com/eventstore/eventstore/eventstore
        tag-latest: false
        additional-tags: ${{ env.VERSION }}
        registry: https://docker.pkg.github.com
    - name: Docker Push CI
      uses: jen20/action-docker-build@v1
      if: github.event_name == 'push' && matrix.container-runtime == 'focal'
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        repository: docker.pkg.github.com/eventstore/eventstore/eventstore
        tag-latest: false
        additional-tags: ci
        registry: https://docker.pkg.github.com
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019]
        configuration: [release]
    runs-on: ${{ matrix.os }}
    name: ci/github/build-${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - shell: bash
      run: |
        git fetch --prune --unshallow
    - name: Install netcoreapp3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Install net5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Clear Nuget Cache
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        dotnet nuget locals all --clear
    - name: Compile
      shell: bash
      run: |
        dotnet build --configuration ${{ matrix.configuration }} src/EventStore.sln
    - name: Verify Build
      shell: bash
      run: |
        dotnet run --project src/EventStore.ClusterNode --configuration ${{ matrix.configuration }} -- --dev --what-if
    - name: Run Tests
      shell: bash
      run: |
        find ./src -maxdepth 1 -type d -name "*.Tests"  -print0 | xargs -I{} -0 -n1 bash -c 'dotnet test --configuration ${{ matrix.configuration }} --blame --settings ./ci/ci.runsettings --logger:html --logger:trx --logger:"console;verbosity=normal" --results-directory=$(pwd)/test-results/$1 $1' - '{}'
    - name: Collect Test Results
      shell: bash
      if: always()
      run: |
        echo $(find ./test-results -name "*.html" | xargs cat) > test-results.html
    - name: Publish Test Results (HTML)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        path: test-results.html
        name: test-results-${{ matrix.configuration }}-${{ matrix.os }}.html
    - name: Publish Test Results (All)
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}-${{ matrix.os }}
        path: test-results
  package:
    needs: [vulnerability-scan, build, docker-compose, protolock]
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    name: ci/github/package
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - shell: bash
      run: |
        git fetch --prune --unshallow
    - name: Install netcoreapp3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Install net5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Pack
      shell: bash
      run: |
        dotnet tool restore
        dotnet pack --configuration=Release --output=./packages \
          /p:NoWarn=NU5105 \
          /p:RepositoryUrl=https://github.com/EventStore/EventStore \
          /p:RepositoryType=git \
          ./src
    - name: Push
      shell: bash
      if: github.event_name == 'push'
      run: |
        find . -name "*.nupkg" | xargs -n1 dotnet tool run gpr -- push --api-key=${{ secrets.github_token }}

