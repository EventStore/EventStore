resources:
- repo: self

jobs:
- job: windows_x64_debug
  displayName: 'Windows x64 Debug'
  timeoutInMinutes: 20
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - powershell: |
      dotnet build -c Debug src\EventStore.sln
      if (-Not $?) { throw "Exit code is $?" }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Compile
  - powershell: |
      (Get-ChildItem -Attributes Directory src | % FullName) -Match '.Tests' | `
        ForEach-Object { 
          dotnet test -v normal -c Debug --no-build --logger trx $_ -- RunConfiguration.TargetPlatform=x64
          if (-Not $?) { throw "Exit code is $?" }
        }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Test
    errorActionPreference: Stop
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunTitle: "Windows (.NET Framework)"
      platform: "Windows"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: windows-net47-debug
      pathToPublish: '$(Build.SourcesDirectory)\bin\'

- job: windows_x64_release
  displayName: 'Windows x64 Release'
  timeoutInMinutes: 20
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - powershell: |
      dotnet build -c Release src\EventStore.sln
      if (-Not $?) { throw "Exit code is $?" }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Compile
  - powershell: |
      (Get-ChildItem -Attributes Directory src | % FullName) -Match '.Tests' | `
        ForEach-Object { 
          dotnet test -v normal -c Release --no-build --logger trx $_ -- RunConfiguration.TargetPlatform=x64
          if (-Not $?) { throw "Exit code is $?" }
        }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Test
    errorActionPreference: Stop
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunTitle: "Windows (.NET Framework)"
      platform: "Windows"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: windows-net47-release
      pathToPublish: '$(Build.SourcesDirectory)\bin\'

- job: macos_x64_debug
  displayName: 'macOS x64 Debug'
  timeoutInMinutes: 20
  pool:
    vmImage: 'macOS 10.13'
  steps:
  - bash: . '$(Build.SourcesDirectory)/ci/ap-setup-osx.sh'
    displayName: Setup
  - bash: dotnet build -c Debug src/EventStore.sln
    env:
      FrameworkPathOverride: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/4.7-api
    displayName: Compile
  - bash: find ./src -maxdepth 1 -type d -name "*.Tests" -print0| xargs -0 -n1 dotnet test -v normal -c Debug --logger trx
    env:
      FrameworkPathOverride: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/4.7-api
    displayName: Run Tests
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunTitle: "MacOS 10.13 (Mono 5.16)"
      platform: "MacOS 10.13"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: macos-mono516-debug
      pathToPublish: '$(Build.SourcesDirectory)/bin/'

- job: macos_x64_release
  displayName: 'macOS x64 Release'
  timeoutInMinutes: 20
  pool:
    vmImage: 'macOS 10.13'
  steps:
  - bash: . '$(Build.SourcesDirectory)/ci/ap-setup-osx.sh'
    displayName: Setup
  - bash: dotnet build -c Release src/EventStore.sln
    env:
      FrameworkPathOverride: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/4.7-api
    displayName: Compile
  - bash: find ./src -maxdepth 1 -type d -name "*.Tests" -print0| xargs -0 -n1 dotnet test -v normal -c Release --logger trx
    env:
      FrameworkPathOverride: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/4.7-api
    displayName: Run Tests
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunTitle: "MacOS 10.13 (Mono 5.16)"
      platform: "MacOS 10.13"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: macos-mono516-release
      pathToPublish: '$(Build.SourcesDirectory)/bin/'

- job: centos7_x64_debug
  displayName: 'Centos 7 x64 Debug'
  timeoutInMinutes: 20
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: docker pull eventstore/eventstore-ci-centos7:latest
    displayName: Pull Docker image for build
    failOnStderr: false
  - task: Docker@1
    displayName: Compile in CentOS 7 Container
    inputs:
      command: 'run'
      imageName: 'eventstore/eventstore-ci-centos7:latest'
      runInBackground: false
      volumes: '$(Build.SourcesDirectory):/work'
      envVars: |
        FrameworkPathOverride=/usr/lib/mono/4.7-api
        EventStoreBuildConfig=Debug
      containerCommand: ci/ap-build-linux.sh
      workingDirectory: '/work'
  - task: Docker@1
    displayName: Test in CentOS 7 Container
    inputs:
      command: run
      imageName: eventstore/eventstore-ci-centos7:latest
      runInBackground: false
      volumes: '$(Build.SourcesDirectory):/work'
      envVars: |
        FrameworkPathOverride=/usr/lib/mono/4.7-api
        EventStoreBuildConfig=Debug
      containerCommand: ci/ap-test-linux.sh
      workingDirectory: '/work'
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunTitle: "Centos 7 (Mono 5.16)"
      platform: "Centos 7"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: centos7-mono516-debug
      pathToPublish: '$(Build.SourcesDirectory)/bin/'

- job: centos7_x64_release
  displayName: 'Centos 7 x64 Release'
  timeoutInMinutes: 20
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: docker pull eventstore/eventstore-ci-centos7:latest
    displayName: Pull Docker image for build
    failOnStderr: false
  - task: Docker@1
    displayName: Compile in CentOS 7 Container
    inputs:
      command: 'run'
      imageName: 'eventstore/eventstore-ci-centos7:latest'
      runInBackground: false
      volumes: '$(Build.SourcesDirectory):/work'
      envVars: |
        FrameworkPathOverride=/usr/lib/mono/4.7-api
        EventStoreBuildConfig=Release
      containerCommand: ci/ap-build-linux.sh
      workingDirectory: '/work'
  - task: Docker@1
    displayName: Test in CentOS 7 Container
    inputs:
      command: run
      imageName: eventstore/eventstore-ci-centos7:latest
      runInBackground: false
      volumes: '$(Build.SourcesDirectory):/work'
      envVars: |
        FrameworkPathOverride=/usr/lib/mono/4.7-api
        EventStoreBuildConfig=Release
      containerCommand: ci/ap-test-linux.sh
      workingDirectory: '/work'
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunTitle: "Centos 7 (Mono 5.16)"
      platform: "Centos 7"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      artifactName: centos7-mono516-release
      pathToPublish: '$(Build.SourcesDirectory)/bin/'
