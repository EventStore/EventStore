resources:
- repo: self

jobs:
- job: vulnerability_scan
  displayName: Vulnerability Scan
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self 
    fetchDepth: 1
  - task: UseDotNet@2
    displayName: 'Install .NET Core 2.x SDK'
    inputs:
      packageType: 'sdk'
      version: '2.x'
  - task: UseDotNet@2
    displayName: 'Install .NET Core 3.x SDK'
    inputs:
      packageType: 'sdk'
      version: '3.1.100'
  - bash: cd src/ && dotnet restore EventStore.sln && dotnet tool install --tool-path . dotnet-retire && ./dotnet-retire -p EventStore.sln
    displayName: 'Run dotnet-retire'

- job: windows_x64
  strategy:
    matrix:
      RELEASE:
        Configuration: release
  displayName: 'Windows x64'
  timeoutInMinutes: 30
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - checkout: self 
    fetchDepth: 1
  - task: UseDotNet@1
    displayName: 'Install .NET Core 3.x SDK'
    inputs:
      packageType: 'sdk'
      version: '3.1.100'
  - powershell: Import-Certificate -FilePath "src\EventStore.Core.Tests\Services\Transport\Tcp\test_certificates\ca\ca.crt" -CertStoreLocation Cert:\LocalMachine\Root
    displayName: Install test CA root certificate
  - powershell: |
      dotnet build -c $(Configuration) src\EventStore.sln
      if (-Not $?) { throw "Exit code is $?" }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Compile
  - powershell: |
      (Get-ChildItem -Attributes Directory src | % FullName) -Match '\.Tests$' | `
        ForEach-Object {
          dotnet test -v normal -c $(Configuration) --no-build --logger trx --blame --settings ci\ci.runsettings $_ -- RunConfiguration.TargetPlatform=x64
          if (-Not $?) { throw "Exit code is $?" }
        }
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Test
    errorActionPreference: Stop
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testRunTitle: "Windows (.NET Framework)"
      platform: "Windows"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    displayName: Publish Artifacts
    inputs:
      artifactName: windows-netcoreapp3-$(Configuration)
      pathToPublish: '$(Build.SourcesDirectory)\bin\'

- job: ubuntu_x64
  strategy:
    matrix:
      RELEASE:
        Configuration: release

  displayName: Ubuntu 16.04 x64
  timeoutInMinutes: 30
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UseDotNet@1
    displayName: 'Install .NET Core 3.x SDK'
    inputs:
      packageType: 'sdk'
      version: '3.1.100'
  - bash: |
      sudo cp src/EventStore.Core.Tests/Services/Transport/Tcp/test_certificates/ca/ca.crt  /usr/local/share/ca-certificates/ca_eventstore_test.crt
      sudo update-ca-certificates
    displayName: Install test CA root certificate
  - bash: dotnet build -c $(Configuration) src/EventStore.sln
    displayName: Compile
  - bash: find ./src -maxdepth 1 -type d -name "*.Tests" -print0| xargs -0 -n1 dotnet test -v normal -c $(Configuration) --logger trx --blame --settings ./ci/ci.runsettings
    displayName: Run Tests
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testRunTitle: "Ubuntu 16.04"
      platform: "Ubuntu 16.04"
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishBuildArtifacts@1
    condition: eq(variables['System.PullRequest.IsFork'], 'False')
    displayName: Publish Artifacts
    inputs:
      artifactName: ubuntu1604-netcoreapp3-$(Configuration)
      pathToPublish: '$(Build.SourcesDirectory)/bin/'
