<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.engine.api</name>
    </assembly>
    <members>
        <member name="T:NUnit.Engine.ILogger">
            <summary>
            Interface for logging within the engine
            </summary>
        </member>
        <member name="M:NUnit.Engine.ILogger.Error(System.String)">
            <summary>
            Logs the specified message at the error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the error level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Warning(System.String)">
            <summary>
            Logs the specified message at the warning level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified message at the warning level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Info(System.String)">
            <summary>
            Logs the specified message at the info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the info level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Debug(System.String)">
            <summary>
            Logs the specified message at the debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Engine.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:NUnit.Engine.InternalTraceLevel">
            <summary>
            InternalTraceLevel is an enumeration controlling the
            level of detailed presented in the internal log.
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Default">
            <summary>
            Use the default settings as specified by the user.
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Off">
            <summary>
            Do not display any trace messages
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Error">
            <summary>
            Display Error messages only
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Warning">
            <summary>
            Display Warning level and higher messages
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Info">
            <summary>
            Display informational and higher messages
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Debug">
            <summary>
            Display debug messages and higher - i.e. all messages
            </summary>
        </member>
        <member name="F:NUnit.Engine.InternalTraceLevel.Verbose">
            <summary>
            Display debug messages and higher - i.e. all messages
            </summary>
        </member>
        <member name="T:NUnit.Engine.TestSelectionParserException">
            <summary>
            TestSelectionParserException is thrown when an error 
            is found while parsing the selection expression.
            </summary>
        </member>
        <member name="M:NUnit.Engine.TestSelectionParserException.#ctor(System.String)">
            <summary>
            Construct with a message
            </summary>
        </member>
        <member name="M:NUnit.Engine.TestSelectionParserException.#ctor(System.String,System.Exception)">
            <summary>
            Construct with a message and inner exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:NUnit.Engine.TestSelectionParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:NUnit.Engine.Extensibility.TypeExtensionPointAttribute">
            <summary>
            TypeExtensionPointAttribute is used to bind an extension point
            to a class or interface.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.TypeExtensionPointAttribute.#ctor(System.String)">
            <summary>
            Construct a TypeExtensionPointAttribute, specifying the path.
            </summary>
            <param name="path">A unique string identifying the extension point.</param>
        </member>
        <member name="M:NUnit.Engine.Extensibility.TypeExtensionPointAttribute.#ctor">
            <summary>
            Construct an TypeExtensionPointAttribute, without specifying the path.
            The extension point will use a path constructed based on the interface
            or class to which the attribute is applied.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.TypeExtensionPointAttribute.Path">
            <summary>
            The unique string identifying this ExtensionPoint. This identifier
            is typically formatted as a path using '/' and the set of extension 
            points is sometimes viewed as forming a tree.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.TypeExtensionPointAttribute.Description">
            <summary>
            An optional description of the purpose of the ExtensionPoint
            </summary>
        </member>
        <member name="T:NUnit.Engine.Extensibility.ExtensionPropertyAttribute">
            <summary>
            The ExtensionPropertyAttribute is used to specify named properties for an extension.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.ExtensionPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct an ExtensionPropertyAttribute
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The property value</param>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionPropertyAttribute.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionPropertyAttribute.Value">
            <summary>
            The property value
            </summary>
        </member>
        <member name="T:NUnit.Engine.Extensibility.ExtensionAttribute">
            <summary>
            The ExtensionAttribute is used to identify a class that is intended
            to serve as an extension.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.ExtensionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Engine.Extensibility.ExtensionAttribute"/> class.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionAttribute.Path">
            <summary>
            A unique string identifying the ExtensionPoint for which this Extension is 
            intended. This is an optional field provided NUnit is able to deduce the
            ExtensionPoint from the Type of the extension class.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionAttribute.Description">
            <summary>
            An optional description of what the extension does.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionAttribute.Enabled">
            <summary>
            Flag indicating whether the extension is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionAttribute.EngineVersion">
            <summary>
            The minimum Engine version for which this extension is designed
            </summary>
        </member>
        <member name="T:NUnit.Engine.Extensibility.ExtensionPointAttribute">
            <summary>
            ExtensionPointAttribute is used at the assembly level to identify and
            document any ExtensionPoints supported by the assembly.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.ExtensionPointAttribute.#ctor(System.String,System.Type)">
            <summary>
            Construct an ExtensionPointAttribute
            </summary>
            <param name="path">A unique string identifying the extension point.</param>
            <param name="type">The required Type of any extension that is installed at this extension point.</param>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionPointAttribute.Path">
            <summary>
            The unique string identifying this ExtensionPoint. This identifier
            is typically formatted as a path using '/' and the set of extension 
            points is sometimes viewed as forming a tree.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionPointAttribute.Type">
            <summary>
            The required Type (usually an interface) of any extension that is 
            installed at this ExtensionPoint.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.ExtensionPointAttribute.Description">
            <summary>
            An optional description of the purpose of the ExtensionPoint
            </summary>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IDriverFactory">
            <summary>
            Interface implemented by a Type that knows how to create a driver for a test assembly.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IDriverFactory.IsSupportedTestFramework(System.Reflection.AssemblyName)">
            <summary>
            Gets a flag indicating whether a given AssemblyName
            represents a test framework supported by this factory.
            </summary>
            <param name="reference">An AssemblyName referring to the possible test framework.</param>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IDriverFactory.GetDriver(System.AppDomain,System.Reflection.AssemblyName)">
            <summary>
            Gets a driver for a given test assembly and a framework
            which the assembly is already known to reference.
            </summary>
            <param name="domain">The domain in which the assembly will be loaded</param>
            <param name="reference">An AssemblyName referring to the test framework.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IProject">
            <summary>
            Interface for the various project types that the engine can load.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IProject.ProjectPath">
            <summary>
            Gets the path to the file storing this project, if any.
            If the project has not been saved, this is null.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IProject.ActiveConfigName">
            <summary>
            Gets the active configuration, as defined
            by the particular project.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IProject.ConfigNames">
            <summary>
            Gets a list of the configs for this project
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IProject.GetTestPackage">
            <summary>
            Gets a test package for the primary or active
            configuration within the project. The package 
            includes all the assemblies and any settings
            specified in the project format.
            </summary>
            <returns>A TestPackage</returns>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IProject.GetTestPackage(System.String)">
            <summary>
            Gets a TestPackage for a specific configuration
            within the project. The package includes all the
            assemblies and any settings specified in the 
            project format.
            </summary>
            <param name="configName">The name of the config to use</param>
            <returns>A TestPackage for the named configuration.</returns>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IProjectLoader">
            <summary>
            The IProjectLoader interface is implemented by any class
            that knows how to load projects in a specific format.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IProjectLoader.CanLoadFrom(System.String)">
            <summary>
            Returns true if the file indicated is one that this
            loader knows how to load.
            </summary>
            <param name="path">The path of the project file</param>
            <returns>True if the loader knows how to load this file, otherwise false</returns>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IProjectLoader.LoadFrom(System.String)">
            <summary>
            Loads a project of a known format.
            </summary>
            <param name="path">The path of the project file</param>
            <returns>An IProject interface to the loaded project or null if the project cannot be loaded</returns>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IResultWriter">
            <summary>
            Common interface for objects that process and write out test results
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IResultWriter.CheckWritability(System.String)">
            <summary>
            Checks if the output path is writable. If the output is not
            writable, this method should throw an exception.
            </summary>
            <param name="outputPath"></param>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IResultWriter.WriteResultFile(System.Xml.XmlNode,System.String)">
            <summary>
            Writes result to the specified output path.
            </summary>
            <param name="resultNode">XmlNode for the result</param>
            <param name="outputPath">Path to which it should be written</param>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IResultWriter.WriteResultFile(System.Xml.XmlNode,System.IO.TextWriter)">
            <summary>
            Writes result to a TextWriter.
            </summary>
            <param name="resultNode">XmlNode for the result</param>
            <param name="writer">TextWriter to which it should be written</param>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IFrameworkDriver">
            <summary>
            The IFrameworkDriver interface is implemented by a class that
            is able to use an external framework to explore or run tests
            under the engine.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IFrameworkDriver.ID">
            <summary>
            Gets and sets the unique identifier for this driver,
            used to ensure that test ids are unique across drivers.
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IFrameworkDriver.Load(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Loads the tests in an assembly.
            </summary>
            <returns>An Xml string representing the loaded test</returns>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IFrameworkDriver.CountTestCases(System.String)">
            <summary>
            Count the test cases that would be executed.
            </summary>
            <param name="filter">An XML string representing the TestFilter to use in counting the tests</param>
            <returns>The number of test cases counted</returns>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IFrameworkDriver.Run(NUnit.Engine.ITestEventListener,System.String)">
            <summary>
            Executes the tests in an assembly.
            </summary>
            <param name="listener">An ITestEventHandler that receives progress notices</param>
            <param name="filter">A XML string representing the filter that controls which tests are executed</param>
            <returns>An Xml string representing the result</returns>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IFrameworkDriver.Explore(System.String)">
            <summary>
            Returns information about the tests in an assembly.
            </summary>
            <param name="filter">An XML string representing the filter that controls which tests are included</param>
            <returns>An Xml string representing the tests</returns>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IFrameworkDriver.StopRun(System.Boolean)">
            <summary>
            Cancel the ongoing test run. If no  test is running, the call is ignored.
            </summary>
            <param name="force">If true, cancel any ongoing test threads, otherwise wait for them to complete.</param>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IExtensionPoint">
            <summary>
            An ExtensionPoint represents a single point in the TestEngine
            that may be extended by user addins and extensions.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionPoint.Path">
            <summary>
            Gets the unique path identifying this extension point.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionPoint.Description">
            <summary>
            Gets the description of this extension point. May be null.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionPoint.TypeName">
            <summary>
            Gets the FullName of the Type required for any extension to be installed at this extension point.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionPoint.Extensions">
            <summary>
            Gets an enumeration of IExtensionNodes for extensions installed on this extension point.
            </summary>
        </member>
        <member name="T:NUnit.Engine.Extensibility.IExtensionNode">
            <summary>
            The IExtensionNode interface is implemented by a class that represents a 
            single extension being installed on a particular extension point.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionNode.TypeName">
            <summary>
            Gets the full name of the Type of the extension object.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionNode.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Engine.Extensibility.IExtensionNode"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionNode.Path">
            <summary>
            Gets the unique string identifying the ExtensionPoint for which 
            this Extension is intended. This identifier may be supplied by the attribute
            marking the extension or deduced by NUnit from the Type of the extension class.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionNode.Description">
            <summary>
            Gets an optional description of what the extension does.
            </summary>
        </member>
        <member name="P:NUnit.Engine.Extensibility.IExtensionNode.PropertyNames">
            <summary>
            Gets a collection of the names of all this extension's properties
            </summary>
        </member>
        <member name="M:NUnit.Engine.Extensibility.IExtensionNode.GetValues(System.String)">
            <summary>
            Gets a collection of the values of a particular named property
            If none are present, returns an empty enumerator.
            </summary>
            <param name="name">The property name</param>
            <returns>A collection of values</returns>
        </member>
        <member name="T:NUnit.Engine.IRuntimeFramework">
            <summary>
            Interface implemented by objects representing a runtime framework.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRuntimeFramework.Id">
            <summary>
            Gets the inique Id for this runtime, such as "net-4.5"
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRuntimeFramework.DisplayName">
            <summary>
            Gets the display name of the framework, such as ".NET 4.5"
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRuntimeFramework.FrameworkVersion">
            <summary>
            Gets the framework version: usually contains two components, Major
            and Minor, which match the corresponding CLR components, but not always.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRuntimeFramework.ClrVersion">
            <summary>
            Gets the Version of the CLR for this framework
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRuntimeFramework.Profile">
            <summary>
            Gets a string representing the particular profile installed,
            or null if there is no profile. Currently. the only defined 
            values are Full and Client.
            </summary>
        </member>
        <member name="T:NUnit.Engine.IAvailableRuntimes">
            <summary>
            Interface that returns a list of available runtime frameworks.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IAvailableRuntimes.AvailableRuntimes">
            <summary>
            Gets a list of available runtime frameworks.
            </summary>
        </member>
        <member name="T:NUnit.Engine.IResultService">
            <summary>
            IResultWriterService provides result writers for a specified
            well-known format.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IResultService.Formats">
            <summary>
            Gets an array of the available formats
            </summary>
        </member>
        <member name="M:NUnit.Engine.IResultService.GetResultWriter(System.String,System.Object[])">
            <summary>
            Gets a ResultWriter for a given format and set of arguments.
            </summary>
            <param name="format">The name of the format to be used</param>
            <param name="args">A set of arguments to be used in constructing the writer or null if non arguments are needed</param>
            <returns>An IResultWriter</returns>
        </member>
        <member name="T:NUnit.Engine.IRuntimeFrameworkService">
            <summary>
            Implemented by a type that provides information about the
            current and other available runtimes.
            </summary>
        </member>
        <member name="M:NUnit.Engine.IRuntimeFrameworkService.IsAvailable(System.String)">
            <summary>
            Returns true if the runtime framework represented by
            the string passed as an argument is available.
            </summary>
            <param name="framework">A string representing a framework, like 'net-4.0'</param>
            <returns>True if the framework is available, false if unavailable or nonexistent</returns>
        </member>
        <member name="M:NUnit.Engine.IRuntimeFrameworkService.SelectRuntimeFramework(NUnit.Engine.TestPackage)">
            <summary>
            Selects a target runtime framework for a TestPackage based on
            the settings in the package and the assemblies themselves.
            The package RuntimeFramework setting may be updated as a 
            result and the selected runtime is returned.
            </summary>
            <param name="package">A TestPackage</param>
            <returns>The selected RuntimeFramework</returns>
        </member>
        <member name="T:NUnit.Engine.ServiceStatus">
            <summary>
            Enumeration representing the status of a service
            </summary>
        </member>
        <member name="F:NUnit.Engine.ServiceStatus.Stopped">
            <summary>Service was never started or has been stopped</summary>
        </member>
        <member name="F:NUnit.Engine.ServiceStatus.Started">
            <summary>Started successfully</summary>
        </member>
        <member name="F:NUnit.Engine.ServiceStatus.Error">
            <summary>Service failed to start and is unavailable</summary>
        </member>
        <member name="T:NUnit.Engine.IService">
            <summary>
            The IService interface is implemented by all Services. Although it
            is extensible, it does not reside in the Extensibility namespace
            because it is so widely used by the engine.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IService.ServiceContext">
            <summary>
            The ServiceContext
            </summary>
        </member>
        <member name="P:NUnit.Engine.IService.Status">
            <summary>
            Gets the ServiceStatus of this service
            </summary>
        </member>
        <member name="M:NUnit.Engine.IService.StartService">
            <summary>
            Initialize the Service
            </summary>
        </member>
        <member name="M:NUnit.Engine.IService.StopService">
            <summary>
            Do any cleanup needed before terminating the service
            </summary>
        </member>
        <member name="T:NUnit.Engine.ITestFilterBuilder">
            <summary>
            Interface to a TestFilterBuilder, which is used to create TestFilters
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestFilterBuilder.AddTest(System.String)">
            <summary>
            Add a test to be selected
            </summary>
            <param name="fullName">The full name of the test, as created by NUnit</param>
        </member>
        <member name="M:NUnit.Engine.ITestFilterBuilder.SelectWhere(System.String)">
            <summary>
            Specify what is to be included by the filter using a where clause.
            </summary>
            <param name="whereClause">A where clause that will be parsed by NUnit to create the filter.</param>
        </member>
        <member name="M:NUnit.Engine.ITestFilterBuilder.GetFilter">
            <summary>
            Get a TestFilter constructed according to the criteria specified by the other calls.
            </summary>
            <returns>A TestFilter.</returns>
        </member>
        <member name="T:NUnit.Engine.ITestFilterService">
            <summary>
            The TestFilterService provides builders that can create TestFilters
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestFilterService.GetTestFilterBuilder">
            <summary>
            Get an uninitialized TestFilterBuilder
            </summary>
        </member>
        <member name="T:NUnit.Engine.NUnitEngineNotFoundException">
            <summary>
            The exception that is thrown if a valid test engine is not found
            </summary>
        </member>
        <member name="M:NUnit.Engine.NUnitEngineNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Engine.NUnitEngineNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Engine.NUnitEngineNotFoundException.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Engine.NUnitEngineNotFoundException"/> class.
            </summary>
            <param name="minVersion">The minimum version.</param>
        </member>
        <member name="T:NUnit.Engine.ILogging">
            <summary>
            Interface to abstract getting loggers
            </summary>
        </member>
        <member name="M:NUnit.Engine.ILogging.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="name">The name of the logger to get.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Engine.IServiceLocator">
            <summary>
            IServiceLocator allows clients to locate any NUnit services
            for which the interface is referenced. In normal use, this
            linits it to those services using interfaces defined in the 
            nunit.engine.api assembly.
            </summary>
        </member>
        <member name="M:NUnit.Engine.IServiceLocator.GetService``1">
            <summary>
            Return a specified type of service
            </summary>
        </member>
        <member name="M:NUnit.Engine.IServiceLocator.GetService(System.Type)">
            <summary>
            Return a specified type of service
            </summary>
        </member>
        <member name="T:NUnit.Engine.SettingsEventHandler">
            <summary>
            Event handler for settings changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:NUnit.Engine.SettingsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:NUnit.Engine.SettingsEventArgs">
            <summary>
            Event argument for settings changes
            </summary>
        </member>
        <member name="M:NUnit.Engine.SettingsEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Engine.SettingsEventArgs"/> class.
            </summary>
            <param name="settingName">Name of the setting that has changed.</param>
        </member>
        <member name="P:NUnit.Engine.SettingsEventArgs.SettingName">
            <summary>
            Gets the name of the setting that has changed
            </summary>
        </member>
        <member name="T:NUnit.Engine.ISettings">
            <summary>
            The ISettings interface is used to access all user
            settings and options.
            </summary>
        </member>
        <member name="E:NUnit.Engine.ISettings.Changed">
            <summary>
            Occurs when the settings are changed.
            </summary>
        </member>
        <member name="M:NUnit.Engine.ISettings.GetSetting(System.String)">
            <summary>
            Load a setting from the storage.
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <returns>Value of the setting or null</returns>
        </member>
        <member name="M:NUnit.Engine.ISettings.GetSetting``1(System.String,``0)">
            <summary>
            Load a setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="defaultValue">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Engine.ISettings.RemoveSetting(System.String)">
            <summary>
            Remove a setting from the storage
            </summary>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:NUnit.Engine.ISettings.RemoveGroup(System.String)">
            <summary>
            Remove an entire group of settings from the storage
            </summary>
            <param name="groupName">Name of the group to remove</param>
        </member>
        <member name="M:NUnit.Engine.ISettings.SaveSetting(System.String,System.Object)">
            <summary>
            Save a setting in the storage
            </summary>
            <param name="settingName">Name of the setting to save</param>
            <param name="settingValue">Value to be saved</param>
        </member>
        <member name="T:NUnit.Engine.ITestEngine">
            <summary>
            ITestEngine represents an instance of the test engine.
            Clients wanting to discover, explore or run tests start
            require an instance of the engine, which is generally 
            acquired from the TestEngineActivator class.
            </summary>
        </member>
        <member name="P:NUnit.Engine.ITestEngine.Services">
            <summary>
            Gets the IServiceLocator interface, which gives access to
            certain services provided by the engine.
            </summary>
        </member>
        <member name="P:NUnit.Engine.ITestEngine.WorkDirectory">
            <summary>
            Gets and sets the directory path used by the engine for saving files.
            Some services may ignore changes to this path made after initialization.
            The default value is the current directory.
            </summary>
        </member>
        <member name="P:NUnit.Engine.ITestEngine.InternalTraceLevel">
            <summary>
            Gets and sets the InternalTraceLevel used by the engine. Changing this
            setting after initialization will have no effect. The default value
            is the value saved in the NUnit settings.
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestEngine.Initialize">
            <summary>
            Initialize the engine. This includes initializing mono addins,
            setting the trace level and creating the standard set of services 
            used in the Engine.
            
            This interface is not normally called by user code. Programs linking 
            only to the nunit.engine.api assembly are given a
            pre-initialized instance of TestEngine. Programs 
            that link directly to nunit.engine usually do so
            in order to perform custom initialization.
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestEngine.GetRunner(NUnit.Engine.TestPackage)">
            <summary>
            Returns a test runner instance for use by clients in discovering,
            exploring and executing tests.
            </summary>
            <param name="package">The TestPackage for which the runner is intended.</param>
            <returns>An ITestRunner.</returns>
        </member>
        <member name="T:NUnit.Engine.ITestEventListener">
            <summary>
            The ITestListener interface is used to receive notices of significant
            events while a test is running. It's single method accepts an Xml string, 
            which may represent any event generated by the test framework, the driver
            or any of the runners internal to the engine. Use of Xml means that
            any driver and framework may add additional events and the engine will
            simply pass them on through this interface.
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestEventListener.OnTestEvent(System.String)">
            <summary>
            Handle a progress report or other event.
            </summary>
            <param name="report">An XML progress report.</param>
        </member>
        <member name="T:NUnit.Engine.ITestRunner">
            <summary>
            Interface implemented by all test runners.
            </summary>
        </member>
        <member name="P:NUnit.Engine.ITestRunner.IsTestRunning">
            <summary>
            Get a flag indicating whether a test is running
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.Load">
            <summary>
            Load a TestPackage for possible execution
            </summary>
            <returns>An XmlNode representing the loaded package.</returns>
            <remarks>
            This method is normally optional, since Explore and Run call
            it automatically when necessary. The method is kept in order
            to make it easier to convert older programs that use it.
            </remarks>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.Unload">
            <summary>
            Unload any loaded TestPackage. If none is loaded,
            the call is ignored.
            </summary>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.Reload">
            <summary>
            Reload the current TestPackage
            </summary>
            <returns>An XmlNode representing the loaded package.</returns>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.CountTestCases(NUnit.Engine.TestFilter)">
            <summary>
            Count the test cases that would be run under
            the specified filter.
            </summary>
            <param name="filter">A TestFilter</param>
            <returns>The count of test cases</returns>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.Run(NUnit.Engine.ITestEventListener,NUnit.Engine.TestFilter)">
            <summary>
            Run the tests in the loaded TestPackage and return a test result. The tests
            are run synchronously and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">The listener that is notified as the run progresses</param>
            <param name="filter">A TestFilter used to select tests</param>
            <returns>An XmlNode giving the result of the test execution</returns>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.RunAsync(NUnit.Engine.ITestEventListener,NUnit.Engine.TestFilter)">
            <summary>
            Start a run of the tests in the loaded TestPackage. The tests are run
            asynchronously and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">The listener that is notified as the run progresses</param>
            <param name="filter">A TestFilter used to select tests</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.StopRun(System.Boolean)">
            <summary>
            Cancel the ongoing test run. If no  test is running, the call is ignored.
            </summary>
            <param name="force">If true, cancel any ongoing test threads, otherwise wait for them to complete.</param>
        </member>
        <member name="M:NUnit.Engine.ITestRunner.Explore(NUnit.Engine.TestFilter)">
            <summary>
            Explore a loaded TestPackage and return information about the tests found.
            </summary>
            <param name="filter">The TestFilter to be used in selecting tests to explore.</param>
            <returns>An XmlNode representing the tests found.</returns>
        </member>
        <member name="T:NUnit.Engine.NUnitEngineException">
            <summary>
            NUnitEngineException is thrown when the engine has been
            called with improper values or when a particular facility
            is not available.
            </summary>
        </member>
        <member name="M:NUnit.Engine.NUnitEngineException.#ctor(System.String)">
            <summary>
            Construct with a message
            </summary>
        </member>
        <member name="M:NUnit.Engine.NUnitEngineException.#ctor(System.String,System.Exception)">
            <summary>
            Construct with a message and inner exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:NUnit.Engine.NUnitEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="T:NUnit.Engine.IRecentFiles">
            <summary>
            The IRecentFiles interface is used to isolate the app
            from various implementations of recent files.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRecentFiles.MaxFiles">
            <summary>
            The max number of files saved
            </summary>
        </member>
        <member name="P:NUnit.Engine.IRecentFiles.Entries">
            <summary>
            Get a list of all the file entries
            </summary>
            <returns>The most recent file list</returns>
        </member>
        <member name="M:NUnit.Engine.IRecentFiles.SetMostRecent(System.String)">
            <summary>
            Set the most recent file name, reordering
            the saved names as needed and removing the oldest
            if the max number of files would be exceeded.
            The current CLR version is used to create the entry.
            </summary>
        </member>
        <member name="M:NUnit.Engine.IRecentFiles.Remove(System.String)">
            <summary>
            Remove a file from the list
            </summary>
            <param name="fileName">The name of the file to remove</param>
        </member>
        <member name="T:NUnit.Engine.TestEngineActivator">
            <summary>
            TestEngineActivator creates an instance of the test engine and returns an ITestEngine interface.
            </summary>
        </member>
        <member name="M:NUnit.Engine.TestEngineActivator.CreateInstance(System.Boolean)">
            <summary>
            Create an instance of the test engine.
            </summary>
            <remarks>If private copy is false, the search order is the NUnit install directory for the current user, then
            the install directory for the local machine and finally the current AppDomain's ApplicationBase.</remarks>
            <param name="privateCopy">if set to <c>true</c> loads the engine found in the application base directory, 
            otherwise searches for the test engine with the highest version installed. Defaults to <c>true</c>.</param>
            <exception cref="T:NUnit.Engine.NUnitEngineNotFoundException">Thrown when a test engine of the required minimum version is not found</exception>
            <returns>An <see cref="T:NUnit.Engine.ITestEngine"/></returns>
        </member>
        <member name="M:NUnit.Engine.TestEngineActivator.CreateInstance(System.Version,System.Boolean)">
            <summary>
            Create an instance of the test engine with a minimum version.
            </summary>
            <remarks>If private copy is false, the search order is the NUnit install directory for the current user, then
            the install directory for the local machine and finally the current AppDomain's ApplicationBase.</remarks>
            <param name="minVersion">The minimum version of the engine to return inclusive.</param>
            <param name="privateCopy">if set to <c>true</c> loads the engine found in the application base directory, 
            otherwise searches for the test engine with the highest version installed. Defaults to <c>true</c>.</param>
            <exception cref="T:NUnit.Engine.NUnitEngineNotFoundException">Thrown when a test engine of the given minimum version is not found</exception>
            <returns>An <see cref="T:NUnit.Engine.ITestEngine"/></returns>
        </member>
        <member name="T:NUnit.Engine.TestFilter">
            <summary>
            Abstract base for all test filters. A filter is represented
            by an XmlNode with &lt;filter&gt; as it's topmost element.
            In the console runner, filters serve only to carry this
            XML representation, as all filtering is done by the engine.
            </summary>
        </member>
        <member name="M:NUnit.Engine.TestFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Engine.TestFilter"/> class.
            </summary>
            <param name="xmlText">The XML text that specifies the filter.</param>
        </member>
        <member name="F:NUnit.Engine.TestFilter.Empty">
            <summary>
            The empty filter - one that always passes.
            </summary>
        </member>
        <member name="P:NUnit.Engine.TestFilter.Text">
            <summary>
            Gets the XML representation of this filter as a string.
            </summary>
        </member>
        <member name="T:NUnit.Engine.TestPackage">
            <summary>
            TestPackage holds information about a set of test files to
            be loaded by a TestRunner. Each TestPackage represents
            tests for one or more test files. TestPackages may be named 
            or anonymous, depending on how they are constructed.
            </summary>
        </member>
        <member name="M:NUnit.Engine.TestPackage.#ctor(System.String)">
            <summary>
            Construct a named TestPackage, specifying a file path for
            the assembly or project to be used.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:NUnit.Engine.TestPackage.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Construct an anonymous TestPackage that wraps test files.
            </summary>
            <param name="testFiles"></param>
        </member>
        <member name="P:NUnit.Engine.TestPackage.ID">
            <summary>
            Every test package gets a unique ID used to prefix test IDs within that package.
            </summary>
            <remarks>
            The generated ID is only unique for packages created within the same AppDomain.
            For that reason, NUnit pre-creates all test packages that will be needed.
            </remarks>
        </member>
        <member name="P:NUnit.Engine.TestPackage.Name">
            <summary>
            Gets the name of the package
            </summary>
        </member>
        <member name="P:NUnit.Engine.TestPackage.FullName">
            <summary>
            Gets the path to the file containing tests. It may be
            an assembly or a recognized project type.
            </summary>
        </member>
        <member name="P:NUnit.Engine.TestPackage.SubPackages">
            <summary>
            Gets the list of SubPackages contained in this package
            </summary>
        </member>
        <member name="P:NUnit.Engine.TestPackage.Settings">
            <summary>
            Gets the settings dictionary for this package.
            </summary>
        </member>
        <member name="M:NUnit.Engine.TestPackage.AddSubPackage(NUnit.Engine.TestPackage)">
            <summary>
            Add a subproject to the package.
            </summary>
            <param name="subPackage">The subpackage to be added</param>
        </member>
        <member name="M:NUnit.Engine.TestPackage.AddSetting(System.String,System.Object)">
            <summary>
            Add a setting to a package and all of its subpackages.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="value">The value of the setting</param>
            <remarks>
            Once a package is created, subpackages may have been created
            as well. If you add a setting directly to the Settings dictionary
            of the package, the subpackages are not updated. This method is
            used when the settings are intended to be reflected to all the
            subpackages under the package.
            </remarks>
        </member>
        <member name="M:NUnit.Engine.TestPackage.GetSetting``1(System.String,``0)">
            <summary>
            Return the value of a setting or a default.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="defaultSetting">The default value</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Engine.ITestRun">
            <summary>
            The ITestRun class represents an ongoing test run.
            </summary>
        </member>
        <member name="P:NUnit.Engine.ITestRun.Result">
            <summary>
            Get the result of the test.
            </summary>
            <returns>An XmlNode representing the test run result</returns>
        </member>
        <member name="M:NUnit.Engine.ITestRun.Wait(System.Int32)">
            <summary>
            Blocks the current thread until the current test run completes
            or the timeout is reached
            </summary>
            <param name="timeout">A <see cref="T:System.Int32"/> that represents the number of milliseconds to wait or -1 milliseconds to wait indefinitely. </param>
            <returns>True if the run completed</returns>
        </member>
        <member name="T:NUnit.Engine.IExtensionService">
            <summary>
            The IExtensionService interface allows a runner to manage extensions.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IExtensionService.ExtensionPoints">
            <summary>
            Gets an enumeration of all ExtensionPoints in the engine.
            </summary>
        </member>
        <member name="P:NUnit.Engine.IExtensionService.Extensions">
            <summary>
            Gets an enumeration of all installed Extensions.
            </summary>
        </member>
        <member name="M:NUnit.Engine.IExtensionService.GetExtensionPoint(System.String)">
            <summary>
            Get an ExtensionPoint based on it's unique identifying path.
            </summary>
        </member>
        <member name="M:NUnit.Engine.IExtensionService.GetExtensionNodes(System.String)">
            <summary>
            Get an enumeration of ExtensionNodes based on their identifying path.
            </summary>
        </member>
        <member name="M:NUnit.Engine.IExtensionService.EnableExtension(System.String,System.Boolean)">
            <summary>
            Enable or disable an extension
            </summary>
            <param name="typeName"></param>
            <param name="enabled"></param>
        </member>
    </members>
</doc>
