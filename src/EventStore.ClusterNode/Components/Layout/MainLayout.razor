@using EventStore.ClusterNode.Services
@inherits LayoutComponentBase
@inject Preferences Preferences

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@_theme" IsDarkMode="Preferences.DarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
	<MudAppBar Elevation="1">
		<img src="@(Preferences.DarkMode ? "logo_white.svg" : "logo_plum.svg")" height="32"/>
		@* <MudText Typo="Typo.h5" Class="ml-3">Kurrent SQL</MudText> *@
		<MudSpacer/>
		<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
	</MudAppBar>
	<MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
		<NavMenu/>
	</MudDrawer>
	<MudMainContent Class="mt-16 pa-4">
		@Body
	</MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

@code {
	private bool _drawerOpen;
	private MudTheme _theme;

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (!firstRender) return;

		Preferences.SetTheme(await _mudThemeProvider.GetSystemPreference());
		StateHasChanged();
	}

	protected override void OnInitialized() {
		base.OnInitialized();

		_theme = new() {
			PaletteLight = _lightPalette,
			PaletteDark = _darkPalette,
			LayoutProperties = new(),
			Typography = new() {
				Default = new DefaultTypography {
					FontFamily = [
						"Solina",
						"-apple-system",
						"BlinkMacSystemFont",
						"Segoe UI",
						"Roboto",
						"Helvetica Neue",
						"Arial",
						"Noto Sans",
						"STHeiti",
						"Microsoft YaHei",
						"SimSun", "sans - serif", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"
					]
				},
			}
		};
	}

	private void DrawerToggle() {
		_drawerOpen = !_drawerOpen;
	}

	private void DarkModeToggle() {
		Preferences.ToggleTheme();
	}

	private readonly PaletteLight _lightPalette = new() {
		Black = "#110e2d",
		AppbarText = "#424242",
		AppbarBackground = "rgba(255,255,255,0.8)",
		DrawerBackground = "#ffffff",
		GrayLight = "#e8e8e8",
		GrayLighter = "#f9f9f9",
	};

	private readonly PaletteDark _darkPalette = new() {
		Primary = "#FF4A80",
		Surface = "#1e1e2d",
		Background = "#000",
		BackgroundGray = "#151521",
		AppbarText = "#92929f",
		AppbarBackground = "#000000",
		DrawerBackground = "#1a1a27",
		ActionDefault = "#74718e",
		ActionDisabled = "#9999994d",
		ActionDisabledBackground = "#605f6d4d",
		TextPrimary = "#b2b0bf",
		TextSecondary = "#92929f",
		TextDisabled = "#ffffff33",
		DrawerIcon = "#92929f",
		DrawerText = "#92929f",
		GrayLight = "#2a2833",
		GrayLighter = "#1e1e2d",
		Info = "#4a86ff",
		Success = "#3dcb6c",
		Warning = "#ffb545",
		Error = "#ff3f5f",
		LinesDefault = "#33323e",
		TableLines = "#33323e",
		Divider = "#292838",
		OverlayLight = "#1e1e2d80",
	};

	MudThemeProvider _mudThemeProvider;

	string DarkLightModeButtonIcon => Preferences.DarkMode switch {
		true => Icons.Material.Rounded.AutoMode,
		false => Icons.Material.Outlined.DarkMode,
	};

}


