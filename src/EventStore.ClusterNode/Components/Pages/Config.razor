@page "/ui/config"
@using EventStore.Core
@using EventStore.Core.Bus
@using EventStore.Core.Cluster
@using EventStore.Core.Messages
@using EventStore.Core.Messaging
@inject ClusterVNodeOptions Configuration
@inject IPublisher Publisher

<PageTitle>KurrentDB: Configuration</PageTitle>

<MudText>
	Server address: @_clusterInfo?.ServerIp:@_clusterInfo?.ServerPort
</MudText>
@foreach (var member in _clusterInfo?.Members ?? []) {
	<MudText>@member.HttpEndPointIp:@member.HttpEndPointPort @member.State @(member.IsAlive ? "Alive" : "Dead")</MudText>
}

<MudDataGrid Items="@_items" Dense="@true" Filterable="true">
	<Columns>
		<PropertyColumn Property="x => x.Metadata.Name" Title="Option"/>
		<TemplateColumn>
			<CellTemplate>
				<MudTooltip Text="@context.Item.Metadata.Description">
					<MudIcon Icon="@Icons.Material.Outlined.Info"/>
				</MudTooltip>
			</CellTemplate>
		</TemplateColumn>
		<PropertyColumn Property="x => x.DisplayValue" Title="Value"/>
		<PropertyColumn Property="x => x.SourceDisplayName" Title="Source"/>
		<TemplateColumn Title="Default">
			<CellTemplate>
				<MudCheckBox Disabled="@true" Value="context.Item.IsDefault"></MudCheckBox>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>

@code {
	IReadOnlyCollection<LoadedOption> _items;

	protected override void OnInitialized() {
		base.OnInitialized();
		_items = Configuration.LoadedOptions.Select(x => x.Value).ToList();
	}

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var r = await RequestClient.RequestAsync<GossipMessage.ClientGossip, GossipMessage.SendClientGossip>(Publisher, env => new(env));
		_clusterInfo = r.ClusterInfo;
	}

	ClientClusterInfo _clusterInfo;
}
