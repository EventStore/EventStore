<!doctype html>
<html>
<head>
    <title>Projections</title>
    <script src="/web/es/lib/jquery/jquery-1.8.0.min.js" type="text/javascript"></script>
    <script src="/web/es/lib/jsrender/jsrender.js" type="text/javascript"></script>
    <script src="/web/es/js/es.tmpl.js" type="text/javascript"></script>
    <script id="r-head">
        es.tmpl.renderHead();
    </script>
    <style type="text/css">
		.content table { table-layout: fixed; }
        .content table .r { text-align: right; }
        .content table .c { text-align: center; }
        .content table thead th { vertical-align: middle; }
		
		.content table td { word-wrap: break-word; }
		.content table .name { width: 150px; }
		.content table .status { width: 75px; }
		.content table .mode { width: 70px; }
		.content table .progress { width: 50px; }
		.content table .position { width: 165px; }
		.content table .checkpoint { width: 165px; }
		.content table .checkpoint-status { width: 75px; }
		.content table .read-writes { width: 75px; }
		.content table .writes { width: 60px; }
		.content table .partitions { width: 65px; }
		.content table .processed { width: 75px; }
		.content table .per-second { width: 75px; }
		.content table .buffered { width: 60px; }
		.content table td {vertical-align: middle;}
    </style>
</head>
<body>
    <div id="content">
        <h1>
            Projections</h1>
        <div class="row">
            <div class="span12">
                <div id="commands-container">
                    <ul style="display: inline;">
                        <li><a id="command-disable-all" class='btn'>
                            Disable All</a></li>
                        <li><a id="command-enable-all" class='btn'>
                                Enable All</a>
                        </li>
                        <li>
                            <input type="checkbox" id="include-queries"/> Include Queries
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th class="c name">Name</th>
                    <th class="c status">Status</th>
                    <th class="c mode">Mode</th>
                    <th class="c progress">% Done</th>
                    <th class="c position">Position</th>
                    <th class="c checkpoint">Last Checkpoint</th>
                    <th class="c read-writes">Reads / Writes In-Progress</th>
                    <th class="c writes">Write Queues</th>
                    <th class="c partitions">Partitions Cached</th>
                    <th class="c processed">Processed</th>
                    <th class="c per-second">per Second</th>
                    <th class="c buffered">Buffered Events</th>
                </tr>
            </thead>
            <tbody id="projections">
            </tbody>
        </table>
        <script id="projectionTemplate" type="text/x-jsrender">
        <tr>
          <td class="name"><a href="view-projection.htm#{{>statusUrl}}">{{>name}}</a></td>
          <td>{{>status}}{{>checkpointStatus}}</td>
          <td>{{>mode}}</td>
          <td class="r">{{>progress.toFixed(1)}}%</td>
          <td class="r">{{>~addSpace(position)}}</td>
          <td class="r">{{>~addSpace(lastCheckpoint)}}</td>
          <td class="r">{{>readsInProgress}} / {{>writesInProgress}}</td>
          <td class="r">{{>writePendingEventsAfterCheckpoint}} / {{>writePendingEventsBeforeCheckpoint}}</td>
          <td class="r">{{>partitionsCached}}</td>
          <td class="r">{{>eventsProcessedAfterRestart}}</td>
          <td class="r">{{>eventsPerSecond}}({{>averageCoreProcessingTime}})</td>
          <td class="r">{{>bufferedEvents}}</td>
        </tr>
        </script>
        <div>
            <header>
                <a href="new-projection.htm" class='btn btn-success'>New Projection</a>
            </header>
        </div>
        <script id="r-body">
            es.tmpl.renderBody();
        </script>
    </div>
    <script type="text/javascript">

        (function() {

            $(function() {

                $.templates("projectionTemplate", "#projectionTemplate");

                requestList();

                $("#command-disable-all").click(onDisableAll);
                $("#command-enable-all").click(onEnableAll);
                    
                function onDisableAll(ev) {
                    ev.preventDefault();
					if (!confirm('Are you sure you want to disable & stop all projections?'))
						return false;
					postToEachProjection("/command/disable");
                    return false;
                }
                
                function onEnableAll(ev) {
                    ev.preventDefault();
					if (!confirm('Are you sure you want to enable & start all projections?'))
						return false;
                    postToEachProjection("/command/enable");
                    return false;
                }

                function postToEachProjection(relativeUrl) {
                    $.ajax("/projections/all-non-transient", {
                        headers: {
                            Accept: "application/json",
                        },
                        success: success,
                        error: error
                    });

                    function success(data, status, xhr) {

                        var errors = [];
                        var ajaxes = [];

                        $.each(data.projections, function(i,projection) {
                            ajaxes.push(disableProjection(projection, errors));
                        });

                        $.when.apply($, ajaxes)
                         .then(function() {
                             if (errors.length === 0)
                                 return;

                             var errorText = "There was some errors:\r\n" + errors.join('\r\n');
                             alert(errorText);
                         });
                         
                        function disableProjection(projection, errors) {
                            var ajax = $.ajax(projection.statusUrl + relativeUrl, {
                                headers: {
                                    Accept: "application/json",
                                },
                                type: "POST",
                                success: function(a,b,c) {
									var d = 5; // let it be here temporarily, debugging rare bug
                                },
                                error: function(xhr, status, error) {
									var errorText = $.trim(xhr.responseText).toLowerCase();
									if (errorText === 'not disabled' || errorText === 'not enabled')
										return;
                                    var err = es.util.formatError("Error when posting to projection '" + projection.name + "'", xhr);
                                    errors.push(err);
                                }
                            });
                            
                            // make fails look like success to wait for them and show all errors at once
                            var newDfd = $.Deferred();
                            ajax.always(newDfd.resolve);
                            return newDfd.promise();
                        }
                    }

                    function error(xhr) {
                        var msg = es.util.formatError("Couldn't get projections list.", xhr);
                        alert(msg);
                    }
                }
            });

            var lastTimestamp = null;
            var lastRequest = {};

            function requestList() {
                var includeQueries = $("#include-queries").attr("checked");

                var requestUrl = includeQueries ? "/projections/any" : "/projections/all-non-transient";

                $.ajax(requestUrl, {
                    headers: {
                        Accept: "application/json",
                    },
                    success: success,
                    error: error
                });

                function success(data, status, xhr) {

                    data.projections.sort(function(a, b) {
                        return a.name.localeCompare(b.name);
                    });
                    var current = {};
                    var currentTime = new Date();
                    for (var i = 0; i < data.projections.length; i++) {
                        current[data.projections[i].name] = data.projections[i];
                        if (lastRequest[data.projections[i].name] !== undefined && lastTimestamp != null) {
                            var eventsProcessed = data.projections[i].eventsProcessedAfterRestart - lastRequest[data.projections[i].name].eventsProcessedAfterRestart;
                            var elapsedTime = currentTime - lastTimestamp;
                            data.projections[i].eventsPerSecond =
                            (1000.0 * eventsProcessed / elapsedTime).toFixed(1);
                            data.projections[i].averageCoreProcessingTime =
                                ((data.projections[i].coreProcessingTime - lastRequest[data.projections[i].name].coreProcessingTime) * 100.0 / elapsedTime).toFixed(1) + "%";
                        }
                    }
                    lastRequest = current;
                    lastTimestamp = currentTime;


                    $("#projections").html(
                        $.render.projectionTemplate(data.projections, {
                            addSpace: function (str) {
                                return str ? str.replace('/', ' / ') : '';
                            }
                        })
                    );

                    setTimeout(requestList, 2000);
                }

                function error(xhr, status) {
                    setTimeout(requestList, 2000);
                }
            }
        })();
    </script>
</body>
</html>
