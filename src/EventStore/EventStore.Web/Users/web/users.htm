<!doctype html>
<html>
<head>
    <title>Users</title>
    <script src="/web/es/lib/jquery/jquery-1.8.0.min.js" type="text/javascript"></script>
    <script src="/web/es/lib/jquery/jquery-ui-1.8.23.min.js" type="text/javascript"></script>
    <script src="/web/es/lib/jsrender/jsrender.js" type="text/javascript"></script>
    <script src="/web/es/lib/require-full.js" type="text/javascript"></script>
    <script src="/web/es/js/es.tmpl.js" type="text/javascript"></script>
    <script id="r-head">
        es.tmpl.renderHead();
    </script>
    <style type="text/css">
        .dialog
        {
            display: none;
        }
    </style>
</head>
<body>
    <div id="content">
        <h1>Users</h1>
        <div id="commands-container">
            <ul style="display: inline;">
                <li><a href="#" id="btn-create" class="btn btn-info">New...</a></li>
                <li></li>
            </ul>
        </div>
        <div id="user-list-container"></div>
        <script id="r-body">
            es.tmpl.renderBody();
        </script>
    </div>
    <div id="user-details-dialog" class="dialog form-horizontal">
        <div id="user-details-dialog-content"></div>
        <div class="commands-container" style="text-align: right;">
            <ul style="display: inline">
                <li><a href="#" class="btn btn-info" id="button-details-edit">Edit...</a></li>
                <li><a href="#" class="btn btn-danger" id="button-details-delete">Delete...</a></li>
                <li><a href="#" class="btn btn-info" id="button-details-disable">Disable...</a></li>
                <li><a href="#" class="btn btn-info" id="button-details-enable">Enable...</a></li>
                <li><a href="#" class="btn btn-info" id="button-details-reset-password">Reset Password...</a></li>
                <li><a href="#" class="btn" id="button-details-close">Close</a></li>
            </ul>
        </div>
    </div>
    <div id="edit-user-details-dialog" class="dialog">
        <form id="edit-user-details-form" class="form-horizontal">
            <div class="control-group">
                <label class="control-label add-on" for="input-login-name">Login</label>
                <div class="controls">
                    <input type="text" id="input-login-name" name="input-login-name"/>
                    <span class="help-inline"></span>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label add-on" for="input-full-name">Full Name</label>
                <div class="controls">
                    <input type="text" id="input-full-name" name="input-full-name"/>
                    <span class="help-inline"></span>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label add-on" for="input-is-admin">Is Administrator</label>
                <div class="controls">
                    <input type="checkbox" id="input-is-admin" name="input-is-admin"/>
                    <span class="help-inline"></span>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label add-on" for="input-password-current">Current Password</label>
                <div class="controls">
                    <input type="password" id="input-password-current" name="input-password-current"/>
                    <span class="help-inline"></span>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label add-on" for="input-password">Password</label>
                <div class="controls">
                    <input type="password" id="input-password" name="input-password"/>
                    <span class="help-inline"></span>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label add-on" for="input-password">Confirm</label>
                <div class="controls">
                    <input type="password" id="input-password-confirm" name="input-password-confirm"/>
                    <span class="help-inline"></span>
                </div>
            </div>
            <div class="commands-container" style="text-align: right;">
                <ul style="display: inline">
                    <li><a href="#" class="btn btn-primary" id="button-ok">Create</a></li>
                    <li><a href="#" class="btn" id="button-cancel">Cancel</a></li>
                </ul>
            </div>
        </form>
    </div>
    <script id="users-template" type="text/x-jsrender">
             <table class="table table-bordered table-striped queue-stats" style="table-layout: fixed; ">
                <thead>
                    <tr>
                        <th style="width: 70px;">Login Name</th>
                        <th style="width: 120px;">Full Name</th>
                        <th style="width: 150px;">Groups</th>
                        <th style="width: 50px;">Disabled</th>
                        <th style="width: 50px;">Updated</th>
                    </tr>
                </thead>
                <tbody class="stats-body">
                    {{for data}}
                    <tr>
                      <td><a href="#" class="user-login" data-login="{{>loginName}}">{{>loginName}}<a/></td>
                      <td>{{>fullName}}</td>
                      <td>{{>groups}}</td>
                      <td>{{>disabled}}</td>
                      <td>{{:~formatDate(dateLastUpdated)}}</td>
                    </tr>
                    {{/for}}
                </tbody>
            </table>
        
    </script>
    <script id="user-template" type="text/x-jsrender">
            <div class="control-group">
                <div class="control-label"><label>Login:</label></div>
                <div class="controls">{{>loginName}}</div>
            </div>
            <div class="control-group">
                <div class="control-label"><label>Full Name:</label></div>
                <div class="controls">{{>fullName}}</div>
            </div>
            <div class="control-group">
                <div class="control-label"><label>Groups:</label></div>
                <div class="controls">{{>groups}}</div>
            </div>
            <div class="control-group">
                <div class="control-label"><label>Disabled:</label></div>
                <div class="controls">{{>disabled}}</div>
            </div>
            <div class="control-group">
                <div class="control-label"><label>Last Updated:</label></div>
                <div class="controls">{{:~formatDate(dateLastUpdated)}}</div>
            </div>
    
    </script>
    <script type="text/javascript">
        require.config({ baseUrl: "/web/users/js" });
        require(['Controller'],
            function (controller) {
                var users = controller.create();
                var activeEditDialogOkfunction = null;
                $(function () {

                    $.templates({
                        usersTemplate: "#users-template",
                        userTemplate: "#user-template",
                    });


                    $("#btn-create").click(function(e) {
                        e.preventDefault();
                        displayCreateUser();
                    });

                    $("form").submit(function(e) {
                        e.preventDefault();
                    });

                    $("#button-ok").click(function (e) {
                        activeEditDialogOkfunction();
                    });

                    $("#button-details-close").click(function (e) {
                        $("#user-details-dialog").dialog("close");
                        getAndDisplayUsers();
                    });

                    $("#button-cancel").click(function (e) {
                        $("#edit-user-details-dialog").dialog("close");
                    });

                    getAndDisplayUsers();

                });

                function getAndDisplayUsers() {
                    users.getAll(function (usersMessage) {
                        displayUsers(usersMessage);
                    });
                }

                function get(input) {
                    var jInput = $("#" + input);
                    var jControlGroup = jInput.closest(".control-group");
                    return {
                        val: jInput.attr("type") === "checkbox" ? jInput.attr("checked") === "checked" : jInput.val(),
                        set: function (v) {
                            if (jInput.attr("type") === "checkbox") {
                                if (v)
                                    jInput.attr("checked", "checked");
                                else 
                                    jInput.removeAttr("checked");
                            } else
                                jInput.val(v);
                        },
                        reset: function () {
                            var group = jInput.closest(".control-group");
                            group.removeClass("error");
                            group.find(".help-inline").text("");
                        },
                        invalid: function (message) {
                            var group = jInput.closest(".control-group");
                            group.addClass("error");
                            group.find(".help-inline").text(message);
                        },

                        enabled: function () {
                            return jInput.attr("data-mode") == "normal";
                        },

                        configure: function (mode) {
                            switch (mode) {
                                case "normal":
                                    jControlGroup.show();
                                    jInput.removeAttr("readonly");
                                    break;
                                case "unused":
                                    jControlGroup.hide();
                                    jInput.removeAttr("readonly");
                                    break;
                                case "readonly":
                                    jControlGroup.show();
                                    jInput.attr("readonly", "readonly");
                                    break;
                                default:
                                    throw "Unknown mode:in " + mode;
                            }
                            jInput.attr("data-mode", mode);
                        }
                    };
                }

                function getInput() {

                    function required(v) {
                        if (v.enabled() && !v.val) {
                            v.invalid("required");
                            return false;
                        }
                        return true;
                    }

                    function match(v1, v2) {
                        if (v1.enabled() && v2.enabled() && v1.val != v2.val) {
                            v1.invalid("does not match");
                            return false;
                        }
                        return true;
                    }

                    return {
                        isAdmin: get("input-is-admin"),
                        loginName: get("input-login-name"),
                        fullName: get("input-full-name"),
                        currentPassword: get("input-password-current"),
                        password: get("input-password"),
                        confirmPassword: get("input-password-confirm"),

                        validate: function () {
                            this.loginName.reset();
                            this.fullName.reset();
                            this.isAdmin.reset();
                            this.password.reset();
                            this.confirmPassword.reset();

                            if (!required(this.loginName))
                                return false;
                            if (!required(this.fullName))
                                return false;
                            if (!required(this.password))
                                return false;
                            if (!required(this.confirmPassword))
                                return false;
                            if (!match(this.password, this.confirmPassword))
                                return false;
                            return true;
                        }
                    };
                }

                function createUser() {
                    var inputData = getInput();
                    if (inputData.validate()) {
                        var data = {
                            loginName: inputData.loginName.val,
                            fullName: inputData.fullName.val,
                            password: inputData.password.val,
                            groups: inputData.isAdmin.val ? ["$admins"] : [],
                        };
                        users.create(data, createSucceeded, createFailed);
                    }
                }

                function editUser() {
                    var inputData = getInput();
                    if (inputData.validate()) {
                        var data = {
                            loginName: inputData.loginName.val,
                            fullName: inputData.fullName.val,
                            groups: inputData.isAdmin.val ? ["$admins"] : [],
                        };
                        users.update(data, succeeded, failed);
                    }
                }

                function resetPassword() {
                    var inputData = getInput();
                    if (inputData.validate()) {
                        var data = {
                            loginName: inputData.loginName.val,
                            newPassword: inputData.password.val,
                        };
                        users.setPassword(data, succeeded, failed);
                    }
                }

                function deleteUser() {
                    var inputData = getInput();
                    if (inputData.validate()) {
                        var data = {
                            loginName: inputData.loginName.val,
                        };
                        users.delete(data, succeeded, failed);
                    }
                }

                function disableUserAccount() {
                    var inputData = getInput();
                    if (inputData.validate()) {
                        var data = {
                            loginName: inputData.loginName.val,
                        };
                        users.disable(data, succeeded, failed);
                    }
                }

                function enableUserAccount() {
                    var inputData = getInput();
                    if (inputData.validate()) {
                        var data = {
                            loginName: inputData.loginName.val,
                        };
                        users.enable(data, succeeded, failed);
                    }
                }

                function succeeded(login) {
                    $("#edit-user-details-dialog").dialog("close");
                    initializeUserDetails(login);
                }

                function failed(status) {
                    alert(status);
                    $("#edit-user-details-dialog").dialog("close");
                }

                function createSucceeded(login) {
                    $("#edit-user-details-dialog").dialog("close");
                    // timeout to wait for the projectuion to catch up
                    setTimeout(getAndDisplayUsers, 500);
                }

                function createFailed(status) {
                    alert(status);
                    $("#edit-user-details-dialog").dialog("close");
                    // timeout to wait for the projectuion to catch up
                    setTimeout(getAndDisplayUsers, 500);
                }

                function displayUsers(users) {
                    $("#user-list-container").html($.render.usersTemplate(users, {formatDate: formatDate}));
                    $(".user-login").click(function (e) {
                        var login = $(this).attr('data-login');
                        e.preventDefault();
                        displayUserDetails(login);
                    });
                }

                function initializeUserDetails(login) {
                    users.get(login, function (userData) {
                        $("#user-details-dialog-content").html($.render.userTemplate(userData.data, { formatDate: formatDate }));
                        $("#button-details-edit").unbind('click').click(function (e) {
                            e.preventDefault();
                            displayEditUser(userData);
                        });
                        $("#button-details-reset-password").unbind('click').click(function (e) {
                            e.preventDefault();
                            displayResetPassword(userData);
                        });
                        if (userData.data.disabled) {
                            $("#button-details-disable").hide();
                            $("#button-details-enable").show();
                        } else {
                            $("#button-details-disable").show();
                            $("#button-details-enable").hide();
                        }
                        $("#button-details-disable").unbind('click').click(function (e) {
                            e.preventDefault();
                            displayDisableUserAccount(userData);
                        });
                        $("#button-details-enable").unbind('click').click(function (e) {
                            e.preventDefault();
                            displayEnableUserAccount(userData);
                        });
                        $("#button-details-delete").unbind('click').click(function (e) {
                            e.preventDefault();
                            displayDeleteUser(userData);
                        });
                    });
                }

                function displayUserDetails(login) {
                    $("#user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 350,
                        title: "User Account Details",
                        autoResize: true,
                        open: function (event, ui) {
                            initializeUserDetails(login);
                        }
                    });
                }

                function displayCreateUser() {
                    activeEditDialogOkfunction = createUser;
                    $("#edit-user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 360,
                        title: "Create User Account",
                        autoResize: true,
                        open: function (event, ui) {
                            var inputs = getInput();
                            inputs.loginName.configure("normal");
                            inputs.fullName.configure("normal");
                            inputs.isAdmin.configure("normal");
                            inputs.currentPassword.configure("unused");
                            inputs.password.configure("normal");
                            inputs.confirmPassword.configure("normal");

                            $("#button-ok").text("Create");
                        }
                    });
                }

                function displayEditUser(userData) {
                    activeEditDialogOkfunction = editUser;
                    $("#edit-user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 280,
                        title: "Edit User Account",
                        autoResize: true,
                        open: function (event, ui) {
                            var inputs = getInput();
                            inputs.loginName.configure("readonly");
                            inputs.fullName.configure("normal");
                            inputs.isAdmin.configure("normal");
                            inputs.currentPassword.configure("unused");
                            inputs.password.configure("unused");
                            inputs.confirmPassword.configure("unused");

                            inputs.loginName.set(userData.data.loginName);
                            inputs.fullName.set(userData.data.fullName);
                            inputs.isAdmin.set($.inArray("$admins", userData.data.groups) !== -1),

                            $("#button-ok").text("Update");
                        }
                    });
                }


                function displayResetPassword(userData) {
                    activeEditDialogOkfunction = resetPassword;
                    $("#edit-user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 310,
                        title: "Reset Password",
                        autoResize: true,
                        open: function (event, ui) {
                            var inputs = getInput();
                            inputs.loginName.configure("readonly");
                            inputs.fullName.configure("unused");
                            inputs.isAdmin.configure("unused");
                            inputs.currentPassword.configure("unused");
                            inputs.password.configure("normal");
                            inputs.confirmPassword.configure("normal");

                            inputs.loginName.set(userData.data.loginName);
                            inputs.fullName.set(userData.data.fullName);

                            $("#button-ok").text("Reset");
                        }
                    });
                }


                function displayDeleteUser(userData) {
                    activeEditDialogOkfunction = deleteUser;
                    $("#edit-user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 220,
                        title: "Delete User Account",
                        autoResize: true,
                        open: function (event, ui) {
                            var inputs = getInput();
                            inputs.loginName.configure("readonly");
                            inputs.fullName.configure("readonly");
                            inputs.isAdmin.configure("unused");
                            inputs.currentPassword.configure("unused");
                            inputs.password.configure("unused");
                            inputs.confirmPassword.configure("unused");

                            inputs.loginName.set(userData.data.loginName);
                            inputs.fullName.set(userData.data.fullName);

                            $("#button-ok").text("Delete");
                        }
                    });
                }



                function displayEnableUserAccount(userData) {
                    activeEditDialogOkfunction = enableUserAccount;
                    $("#edit-user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 220,
                        title: "Enable User Account",
                        autoResize: true,
                        open: function (event, ui) {
                            var inputs = getInput();
                            inputs.loginName.configure("readonly");
                            inputs.fullName.configure("readonly");
                            inputs.isAdmin.configure("unused");
                            inputs.currentPassword.configure("unused");
                            inputs.password.configure("unused");
                            inputs.confirmPassword.configure("unused");

                            inputs.loginName.set(userData.data.loginName);
                            inputs.fullName.set(userData.data.fullName);

                            $("#button-ok").text("Enable");
                        }
                    });
                }

                function displayDisableUserAccount(userData) {
                    activeEditDialogOkfunction = disableUserAccount;
                    $("#edit-user-details-dialog").dialog({
                        modal: true,
                        width: 600,
                        height: 220,
                        title: "Disable User Account",
                        autoResize: true,
                        open: function (event, ui) {
                            var inputs = getInput();
                            inputs.loginName.configure("readonly");
                            inputs.fullName.configure("readonly");
                            inputs.isAdmin.configure("unused");
                            inputs.currentPassword.configure("unused");
                            inputs.password.configure("unused");
                            inputs.confirmPassword.configure("unused");

                            inputs.loginName.set(userData.data.loginName);
                            inputs.fullName.set(userData.data.fullName);

                            $("#button-ok").text("Disable");
                        }
                    });
                }


                function formatDate(s) {
                    function pad(num, size) {
                        var s = num + "";
                        while (s.length < size) s = "0" + s;
                        return s;
                    }

                    var d = new Date(s);
                    return (1900 + d.getYear()) + "-" + pad((1 + d.getMonth()), 2) + "-" + pad(d.getDate(), 2) + " " +
                        pad(d.getHours(), 2) + ":" + pad(d.getMinutes(), 2) + ":" + pad(d.getSeconds(), 2);
                }


            });
    </script>
</body>
</html>
