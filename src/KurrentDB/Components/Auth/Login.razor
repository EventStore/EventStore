@page "/ui/login"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using EventStore.Core.Authentication
@using EventStore.Plugins.Authentication
@using KurrentDB.Services
@using Microsoft.AspNetCore.Http

<EditForm Model="Input" OnValidSubmit="LoginUser" FormName="LoginUser">
	<DataAnnotationsValidator/>
	<MudGrid>
		<MudItem xs="6">
			<MudCard>
				<MudCardContent>
					<MudTextField Label="Username" HelperText="Enter your username" AutoFocus="true"
					              @bind-Value="Input.Username" For="@(() => Input.Username)"/>
					<MudTextField Label="Password" HelperText="Enter your password" Class="mt-3"
					              @bind-Value="Input.Password" For="@(() => Input.Password)"
					              InputType="InputType.Password"/>
				</MudCardContent>
				<MudCardActions>
					<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
					           Class="ml-auto">Log in
					</MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>
		<MudFlexBreak/>
		<MudItem xs="6">
		</MudItem>
	</MudGrid>
</EditForm>

@code {
	[Inject] NavigationManager NavigationManager { get; set; }
	[Inject] IAuthenticationProvider AuthProvider { get; set; }
	[Inject] IAuthService AuthService { get; set; }
	[Inject] ISnackbar Snackbar { get; set; }
	[SupplyParameterFromForm] LoginInputModel Input { get; set; } = new();
	[SupplyParameterFromQuery] string ReturnUrl { get; set; }
	[CascadingParameter] HttpContext HttpContext { get; set; } = default!;

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		Console.WriteLine(HttpContext?.User?.Identity?.IsAuthenticated);
		if (firstRender && !AuthService.IsLoggedIn) {
			var restoredFromState = await AuthService.GetStateFromTokenAsync();
			if (restoredFromState) {
				Redirect();
			}

			// Try to log in with a dummy user that will always work in insecure mode
			var dummy = JwtTokenService.GenerateRandomString(10);
			var (status, principal) = await LoginUser(dummy, dummy);
			if (status == HttpAuthenticationRequestStatus.Authenticated) {
				await AuthService.Login(principal);
				Redirect();
			}
		}
	}

	public async Task LoginUser() {
		var (status, principal) = await LoginUser(Input.Username, Input.Password);
		if (status != HttpAuthenticationRequestStatus.Authenticated) {
			Snackbar.Add("Invalid username or password", Severity.Error);
			return;
		}

		await AuthService.Login(principal);
		Redirect();
	}

	async Task<(HttpAuthenticationRequestStatus, ClaimsPrincipal)> LoginUser(string username, string password) {
		var request = new HttpAuthenticationRequest(new DefaultHttpContext(), username, password);
		AuthProvider.Authenticate(request);
		return await request.AuthenticateAsync();
	}

	void Redirect() {
		var redirectUrl = string.IsNullOrWhiteSpace(ReturnUrl) ? "/ui/cluster" : ReturnUrl;
		NavigationManager.NavigateTo(redirectUrl);
	}

	private sealed class LoginInputModel {
		[Required] public string Username { get; set; } = "";

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";
	}
}
