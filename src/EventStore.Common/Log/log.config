<?xml version="1.0" encoding="utf-8"?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      throwExceptions="false"
      throwConfigExceptions="true"
      autoReload="true">

	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>

	<variable name="VerboseLayout"
	          value="[PID:${processid:padCharacter=0:padding=5}:${threadid:padCharacter=0:padding=3} ${date:universalTime=true:format=yyyy\.MM\.dd HH\:mm\:ss\.fff} ${level:padding=-5:uppercase=true} ${logger:padding=-20:fixedLength=true}] ${message}${onexception:${newline}${literal:text=EXCEPTION OCCURRED}${newline}${exception:format=tostring:innerFormat=tostring:maxInnerExceptionLevel=20}}" />
	<variable name="ConsoleLayout"
	          value="[${processid:padCharacter=0:padding=5},${threadid:padCharacter=0:padding=2},${date:universalTime=true:format=HH\:mm\:ss\.fff}] ${message}${onexception:${newline}${literal:text=EXCEPTION OCCURRED}${newline}${exception:format=message}}" />
	<variable name="LogFileNameBase"
	          value="${logsdir}/${shortdate:universalTime=true}/${environment:variable=EVENTSTORE_INT-COMPONENT-NAME}" />

	<targets>
		<default-wrapper xsi:type="AsyncWrapper" overflowAction="Grow" timeToSleepBetweenBatches="0" />
		<target name="fileLog" xsi:type="File" fileName="${LogFileNameBase}.log" layout="${VerboseLayout}"
		        keepFileOpen="true" openFileCacheTimeout="30" />
		<target name="fileLogStructured" xsi:type="File" fileName="${LogFileNameBase}.log" keepFileOpen="true"
		        openFileCacheTimeout="30">
			<layout xsi:type="JsonLayout">
				<attribute name="PID" layout="${processid}" />
				<attribute name="ThreadID" layout="${threadid}" />
				<attribute name="Date" layout="${date:universalTime=true:format=yyyy\-MM\-ddTHH\:mm\:ss\.ffffffZ}" />
				<attribute name="Level" layout="${level}" />
				<attribute name="Logger" layout="${logger}" />
				<attribute name="Message" layout="${message:raw=true}" />
				<attribute name="Exception" layout="${exception:format=@}" encode="false" />
				<attribute name="EventProperties" encode="false">
					<layout type='JsonLayout' includeAllProperties="true" />
				</attribute>
			</layout>
		</target>

		<target name="errorFileLog" xsi:type="FilteringWrapper"
		        condition="length('${exception}')>0 || level==LogLevel.Error || level==LogLevel.Fatal">
			<target xsi:type="File" fileName="${LogFileNameBase}-err.log" layout="${VerboseLayout}" keepFileOpen="true"
			        openFileCacheTimeout="30" />
		</target>
		<target name="errorFileLogStructured" xsi:type="FilteringWrapper"
		        condition="length('${exception}')>0 || level==LogLevel.Error || level==LogLevel.Fatal">
			<target xsi:type="File" fileName="${LogFileNameBase}-err.log" keepFileOpen="true" openFileCacheTimeout="30">
				<layout xsi:type="JsonLayout">
					<attribute name="PID" layout="${processid}" />
					<attribute name="ThreadID" layout="${threadid}" />
					<attribute name="Date" layout="${date:universalTime=true:format=yyyy\-MM\-ddTHH\:mm\:ss\.ffffffZ}" />
					<attribute name="Level" layout="${level}" />
					<attribute name="Logger" layout="${logger}" />
					<attribute name="Message" layout="${message:raw=true}" />
					<attribute name="Exception" layout="${exception:format=@}" encode="false" />
					<attribute name="EventProperties" encode="false">
						<layout type='JsonLayout' includeAllProperties="true" />
					</attribute>
				</layout>
			</target>
		</target>

		<target name="plainConsoleLog" xsi:type="Console" layout="${ConsoleLayout}" />

		<target name="statsFileLog" xsi:type="File" fileName="${LogFileNameBase}-stats.csv" layout="${message}"
		        keepFileOpen="true" openFileCacheTimeout="30" />
		<target name="statsFileLogStructured" xsi:type="File" fileName="${LogFileNameBase}-stats.json" layout="${message}"
		        keepFileOpen="true" openFileCacheTimeout="30" />
	</targets>

	<rules>
		<logger name="REGULAR-STATS-LOGGER" minlevel="Trace" writeTo="statsFileLog">
			<filters>
				<when condition="is-structured()" action="Ignore" />
			</filters>
		</logger>

		<logger name="REGULAR-STATS-LOGGER" minlevel="Trace" writeTo="statsFileLogStructured" final="true">
			<filters>
				<when condition="is-structured()==false" action="Ignore" />
			</filters>
		</logger>

		<logger name="*" minlevel="Trace" writeTo="fileLog, errorFileLog">
			<filters>
				<when condition="is-structured()" action="Ignore" />
			</filters>
		</logger>

		<logger name="*" minlevel="Trace" writeTo="fileLogStructured, errorFileLogStructured">
			<filters>
				<when condition="is-structured()==false" action="Ignore" />
			</filters>
		</logger>

		<logger name="Microsoft.AspNetCore.*" minlevel="Warn" final="true" />

		<logger name="*" minlevel="Trace" writeTo="plainConsoleLog">
		</logger>
	</rules>
</nlog>
