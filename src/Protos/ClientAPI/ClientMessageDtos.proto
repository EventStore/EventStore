syntax = "proto3";

package EventStore.Client.Messages;

enum OperationResult
{
	Success = 0;
	PrepareTimeout = 1;
	CommitTimeout = 2;
	ForwardTimeout = 3;
	WrongExpectedVersion = 4;
	StreamDeleted = 5;
	InvalidTransaction = 6;
	AccessDenied = 7;
}

message EventRecord {
	string event_stream_id = 1;
	int64 event_number = 2;
	bytes event_id = 3;
	string event_type = 4;
	int32 data_content_type = 5;
	int32 metadata_content_type = 6;
	bytes data = 7;
	bytes metadata = 8;
	int64 created = 9;
	int64 created_epoch = 10;
}

message ResolvedEvent {
	EventRecord event = 1;
	EventRecord link = 2;
	int64 commit_position = 3;
	int64 prepare_position = 4;
}

message SubscribeToStream {
	string event_stream_id = 1;
	bool resolve_link_tos = 2;
}

message CheckpointReached {
	int64 commit_position = 1;
	int64 prepare_position = 2;
}

message SubscriptionConfirmation {
	int64 last_commit_position = 1;
	int64 last_event_number = 2;
}

message StreamEventAppeared {
	ResolvedEvent event = 1;
}

message UnsubscribeFromStream {
}

message SubscriptionDropped {

	enum SubscriptionDropReason {
		Unsubscribed = 0;
		AccessDenied = 1;
		NotFound=2;
		PersistentSubscriptionDeleted=3;
		SubscriberMaxCountReached=4;
	}
	
	SubscriptionDropReason reason = 1;
}

message NotHandled {
	
	enum NotHandledReason {
		NotReady = 0;
		TooBusy = 1;
		NotLeader = 2;
		IsReadOnly = 3;
	}
	
	NotHandledReason reason = 1;
	bytes additional_info = 2;

	message LeaderInfo {
		string external_tcp_address = 1;
		int32 external_tcp_port = 2;
		string http_address = 3;
		int32 http_port = 4;
		string external_secure_tcp_address = 5;
		int32 external_secure_tcp_port = 6;
	}
}

message ScavengeDatabase {
}

message ScavengeDatabaseResponse {
	
	enum ScavengeResult {
		Started = 0;
		InProgress = 1;
		Unauthorized = 2;
	}
	
	ScavengeResult result = 1;
	string scavengeId = 2;
	
}

message IdentifyClient {
	int32 version = 1;
	string connection_name = 2;
}

message ClientIdentified {
}
